name: CMake

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

env:
  BUILD_TYPE: Release
  # For Raspbian
  CROSS_ROOT_DIR: /usr/local/build-envs/armhf
  CROSS_ARCH: armhf
  CROSS_DEBIAN_VER: buster

jobs:
  Linux-64:
    name: Build Linux
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        name: BodbDearg/PsyDoom
        ref: refs/heads/master

    - name: Install Dependencies
      run: |
       sudo apt-get update
       sudo apt-get -y install libgl-dev libvulkan-dev libpulse-dev libx11-dev libxft-dev \
       libxcursor-dev libxext-dev libxfixes-dev libxi-dev libxinerama-dev libxrandr-dev \
       libxxf86vm-dev libfreetype-dev libfreetype6 libfreetype6-dev

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

  Raspbian-armhf:
    name: Build Raspberry
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        name: BodbDearg/PsyDoom
        ref: refs/heads/master

    - name: Setuping 'chroot' environment for making Raspbian PsyDoom builds on Ubuntu
      run: |
        echo "Installing Debootstrap."
        sudo apt-get update
        sudo apt-get -y install qemu-user-static debootstrap
        echo "Adding Raspbian filesystem"
        sudo debootstrap --no-check-gpg --foreign --arch=${{ env.CROSS_ARCH }} ${{ env.CROSS_DEBIAN_VER }} "${{ env.CROSS_ROOT_DIR }}" http://archive.raspbian.org/raspbian
        sudo mkdir -p "${{ env.CROSS_ROOT_DIR }}"
        sudo chroot "${{ env.CROSS_ROOT_DIR }}" /debootstrap/debootstrap --second-stage
        echo deb http://mirrordirector.raspbian.org/raspbian/ ${{ env.CROSS_DEBIAN_VER }} main contrib non-free rpi | sudo tee "${{ env.CROSS_ROOT_DIR }}/etc/apt/sources.list"
        echo deb http://archive.raspberrypi.org/debian/ ${{ env.CROSS_DEBIAN_VER }} main | sudo tee -a "${{ env.CROSS_ROOT_DIR }}/etc/apt/sources.list"
        sudo chroot "${{ env.CROSS_ROOT_DIR }}" apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 7FA3303E
        echo "Updateing the list of available packages inside the 'chroot' environment and then upgradeing all packages"
        sudo chroot "${{ env.CROSS_ROOT_DIR }}" apt-get update
        sudo chroot "${{ env.CROSS_ROOT_DIR }}" apt-get -y upgrade

    - name: Install Dependencies
      run: |
       sudo chroot "${CROSS_ROOT_DIR}" sudo apt-get -y install libgl-dev libvulkan-dev libpulse-dev libx11-dev libxft-dev \
       libxcursor-dev libxext-dev libxfixes-dev libxi-dev libxinerama-dev libxrandr-dev \
       libxxf86vm-dev libfreetype-dev libfreetype6 libfreetype6-dev

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

  Macos:
    name: Build macos
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v3
      with:
        name: BodbDearg/PsyDoom
        ref: refs/heads/master

    - name: Install Dependencies
      run: |
        wget https://sdk.lunarg.com/sdk/download/latest/mac/vulkan-sdk.dmg
        sudo hdiutil attach https://sdk.lunarg.com/sdk/download/latest/mac/vulkan-sdk.dmg
        pushd /Volumes/vulkansdk*
        sudo ./InstallVulkan.app/Contents/MacOS/InstallVulkan --root /usr/local/VulkanSDK --accept-licenses --default-answer --confirm-command install
        popd
        sudo hdiutil detach /Volumes/vulkansdk*
        rm -rv vulkan-sdk.dmg

    - name: Configure CMake
      run: |
        export VULKAN_SDK=/usr/local/VulkanSDK/macOS && \
        export PATH=$PATH:$VULKAN_SDK/bin && \
        export DYLD_LIBRARY_PATH=$VULKAN_SDK/lib:${DYLD_LIBRARY_PATH:-}
        export VK_ADD_LAYER_PATH=$VULKAN_SDK/share/vulkan/explicit_layer.d
        export VK_ICD_FILENAMES=$VULKAN_SDK/share/vulkan/icd.d/MoltenVK_icd.json
        export VK_DRIVER_FILES=$VULKAN_SDK/share/vulkan/icd.d/MoltenVK_icd.json
        export VK_DRIVER_FILES=$VULKAN_SDK/share/vulkan/icd.d/MoltenVK_icd.json
        cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -G Xcode

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

  Windows-x64:
    name: Build Windows 64-bit
    runs-on: windows-latest

    defaults:
      run:
        shell: msys2 {0}

    steps:
    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: mingw64
        update: true
        install: >-
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-cmake

    - uses: actions/checkout@v3
      with:
        name: BodbDearg/PsyDoom
        ref: refs/heads/master

    - name: Install Dependencies
      run: |
        curl -L -o Vulkan-SDK.exe https://sdk.lunarg.com/sdk/download/latest/windows/vulkan-sdk.exe
        ./Vulkan-SDK.exe --accept-licenses --default-answer --confirm-command install
        rm -rf Vulkan-SDK.exe

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_SYSTEM_PROCESSOR=x64

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

  Windows-x32:
    name: Build Windows 32-bit
    runs-on: windows-latest

    defaults:
      run:
        shell: msys2 {0}

    steps:
    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: mingw32
        update: true
        install: >-
            mingw-w64-i686-gcc
            mingw-w64-i686-cmake

    - uses: actions/checkout@v3
      with:
        name: BodbDearg/PsyDoom
        ref: refs/heads/master

    - name: Install Dependencies
      run: |
        curl -L -o Vulkan-SDK.exe https://sdk.lunarg.com/sdk/download/latest/windows/vulkan-sdk.exe
        ./Vulkan-SDK.exe --accept-licenses --default-answer --confirm-command install
        rm -rf Vulkan-SDK.exe

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_SYSTEM_PROCESSOR=x64

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

  WindowsXP-x64:
    name: Build WindowsXP 64-bit
    runs-on: windows-latest

    defaults:
      run:
        shell: msys2 {0}

    steps:
    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: mingw64
        update: true
        install: >-
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-cmake

    - uses: actions/checkout@v3
      with:
        name: BodbDearg/PsyDoom
        ref: refs/heads/master

    - name: Install Dependencies
      run: |
        curl -L -o Vulkan-SDK.exe https://sdk.lunarg.com/sdk/download/latest/windows/vulkan-sdk.exe
        ./Vulkan-SDK.exe --accept-licenses --default-answer --confirm-command install
        rm -rf Vulkan-SDK.exe

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_SYSTEM_PROCESSOR=x64

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

  WindowsXP-x32:
    name: Build WindowsXP 32-bit
    runs-on: windows-latest

    defaults:
      run:
        shell: msys2 {0}

    steps:
    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: mingw32
        update: true
        install: >-
            mingw-w64-i686-gcc
            mingw-w64-i686-cmake

    - uses: actions/checkout@v3
      with:
        name: BodbDearg/PsyDoom
        ref: refs/heads/master

    - name: Install Dependencies
      run: |
        curl -L -o Vulkan-SDK.exe https://sdk.lunarg.com/sdk/download/latest/windows/vulkan-sdk.exe
        ./Vulkan-SDK.exe --accept-licenses --default-answer --confirm-command install
        rm -rf Vulkan-SDK.exe

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_SYSTEM_PROCESSOR=x64

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

